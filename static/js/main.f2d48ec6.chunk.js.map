{"version":3,"sources":["components/Player.js","components/itemType/index.js","components/card/index.js","App.js","index.js"],"names":["Player","item","playerType","onDropPlayer","index","useDrag","type","end","monitor","dropResult","getDropResult","collect","isDragging","dragRef","p","borderRadius","boxShadow","mb","textAlign","ref","bg","color","name","ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","forwardRef","text","connectDragSource","connectDropTarget","elementRef","useRef","opacity","useImperativeHandle","getNode","current","DropTarget","hover","props","component","node","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","connect","dropTarget","DragSource","beginDrag","id","dragSource","update","require","App","useState","players","setPlayer","cards","setCards","dragCard","$splice","team","setTeam","useDrop","accept","isOver","addToTeamRef","console","log","isPlayerOver","removeFromTeamRef","movePlayerToTeam","prev","filter","_","i","removePlayerFromTeam","maxW","justify","height","align","width","fontSize","bgGradient","minH","map","marginTop","card","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.f2d48ec6.chunk.js","sourcesContent":["import { ListItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\n\nconst Player = ({ item, playerType, onDropPlayer , index }) => {\n  const [{ isDragging }, dragRef] = useDrag({\n    type: playerType,\n    item: () => ({ ...item, index }),\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n\n      if (item && dropResult) {\n        onDropPlayer(item);\n\n        \n      }\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <ListItem\n      p=\"2\"\n      borderRadius=\"md\"\n      boxShadow=\"md\"\n      mb=\"2\"\n      textAlign=\"center\"\n      ref={dragRef}\n      bg={\n        isDragging\n          ? playerType === \"player\"\n            ? \"yellow.600\"\n            : \"teal.400\"\n          : \"white\"\n      }\n      color={isDragging ? \"white\" : \"black\"}\n    >\n      {item.name}\n    </ListItem>\n  );\n};\n\nexport default Player;\n","export const ItemTypes = {\r\n    CARD: 'card',\r\n}","import { forwardRef, useImperativeHandle, useRef } from 'react';\r\nimport { DragSource, DropTarget, } from 'react-dnd';\r\nimport { ItemTypes } from '../itemType/index.js';\r\nconst style = {\r\n    border: '1px dashed gray',\r\n    padding: '0.5rem 1rem',\r\n    marginBottom: '.5rem',\r\n    backgroundColor: 'white',\r\n    cursor: 'move',\r\n};\r\nconst Card = forwardRef(function Card({ text, isDragging, connectDragSource, connectDropTarget }, ref) {\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n        getNode: () => elementRef.current,\r\n    }));\r\n    return (<div ref={elementRef} style={{ ...style, opacity }}>\r\n      \r\n\t\t\t{text}\r\n\t\t</div>);\r\n});\r\nexport default DropTarget(ItemTypes.CARD, {\r\n    hover(props, monitor, component) {\r\n        if (!component) {\r\n            return null;\r\n        }\r\n        // node = HTML Div element from imperative API\r\n        const node = component.getNode();\r\n        if (!node) {\r\n            return null;\r\n        }\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n        // Determine rectangle on screen\r\n        const hoverBoundingRect = node.getBoundingClientRect();\r\n        // Get vertical middle\r\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n        // Determine mouse position\r\n        const clientOffset = monitor.getClientOffset();\r\n        // Get pixels to the top\r\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n        // Only perform the move when the mouse has crossed half of the items height\r\n        // When dragging downwards, only move when the cursor is below 50%\r\n        // When dragging upwards, only move when the cursor is above 50%\r\n        // Dragging downwards\r\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n            return;\r\n        }\r\n        // Dragging upwards\r\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n            return;\r\n        }\r\n        // Time to actually perform the action\r\n        props.moveCard(dragIndex, hoverIndex);\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n}, (connect) => ({\r\n    connectDropTarget: connect.dropTarget(),\r\n}))(DragSource(ItemTypes.CARD, {\r\n    beginDrag: (props) => ({\r\n        id: props.id,\r\n        index: props.index,\r\n    }),\r\n}, (connect, monitor) => ({\r\n    connectDragSource: connect.dragSource(),\r\n    isDragging: monitor.isDragging(),\r\n}))(Card));\r\n","import { Container, Flex, Heading, List, Stack } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport Player from \"./components/Player\";\nimport Card from \"./components/card/index.js\";\nconst update = require('immutability-helper');\n\n\n\n\nfunction App() {\n  const [players, setPlayer] = useState([\n    { name: \"Player 1\" },\n    { name: \"Player 2\" },\n    { name: \"Player 3\" },\n    { name: \"Player 4\" },\n    { name: \"Player 5\" },\n    { name: \"Player 6\" },\n    { name: \"Player 7\" },\n    { name: \"Player 8\" },\n  ]);\n  const [cards, setCards] = useState([\n    {\n      id: 1,\n      text: 'Write a cool JS library',\n    },\n    {\n      id: 2,\n      text: 'Make it generic enough',\n    },\n    {\n      id: 3,\n      text: 'Write README',\n    },\n    {\n      id: 4,\n      text: 'Create some examples',\n    },\n    {\n      id: 5,\n      text: 'Spam in Twitter and IRC to promote it (note that this element is taller than the others)',\n    },\n    {\n      id: 6,\n      text: '???',\n    },\n    {\n      id: 7,\n      text: 'PROFIT',\n    },\n  ]);\n  const moveCard = (dragIndex, hoverIndex) => {\n    const dragCard = cards[dragIndex];\n    setCards(update(cards, {\n      $splice: [\n        [dragIndex, 1],\n        [hoverIndex, 0, dragCard],\n      ],\n    }));\n  };\n\n  const [team, setTeam] = useState([]);\n\n  const [{ isOver }, addToTeamRef] = useDrop({\n    accept: \"player\",\n    collect: (monitor) => ({ isOver: !!monitor.isOver() }),\n  });\n\n  console.log(isOver);\n  const [{ isOver: isPlayerOver }, removeFromTeamRef] = useDrop({\n    accept: \"team\",\n    collect: (monitor) => ({ isOver: !!monitor.isOver() }),\n  });\n\n  const movePlayerToTeam = (item) => {\n    console.log(item);\n    setPlayer((prev) => prev.filter((_, i) => item.index !== i));\n    setTeam((prev) => [...prev, item]);\n  };\n  const removePlayerFromTeam = (item) => {\n    setTeam((prev) => prev.filter((_, i) => item.index !== i));\n    setPlayer((prev) => [...prev, item]);\n  };\n\n\n  return (\n    <Container maxW=\"800px\">\n\n      <Flex justify=\"space-between\" height=\"90vh\" align=\"center\">\n\n        <Stack width=\"300px\">\n          <Heading fontSize=\"3xl\" color=\"teal.800\" textAlign=\"center\">\n            TEAM\n          </Heading>\n          <List\n            bgGradient={\n              isOver\n                ? \"linear(to-b, teal.300, teal.500)\"\n                : \"linear(to-b, teal.100, teal.200)\"\n            }\n            ref={addToTeamRef}\n            minH=\"70vh\"\n            boxShadow=\"xl\"\n            borderRadius=\"md\"\n            p=\"4\"\n          >\n            {team.map((p, i) => (\n              <Player\n                item={p}\n                key={i}\n                index={i}\n                playerType=\"team\"\n                onDropPlayer={removePlayerFromTeam}\n              />\n            ))}\n          </List>\n        </Stack>\n\n        <Stack width=\"300px\">\n          <Heading fontSize=\"3xl\" color=\"\" textAlign=\"center\">\n            PLAYERS\n          </Heading>\n          <List\n            bgGradient={\n              isPlayerOver\n                ? \"linear(to-b, yellow.300, yellow.500)\"\n                : \"linear(to-b, yellow.100, yellow.200)\"\n            }\n            ref={removeFromTeamRef}\n            p=\"4\"\n            minH=\"70vh\"\n            boxShadow=\"\"\n            borderRadius=\"md\"\n          >\n            {players.map((p, i) => (\n              <Player\n                item={p}\n                key={i}\n                playerType=\"player\"\n                onDropPlayer={movePlayerToTeam}\n                index={i}\n              />\n            ))}\n          </List>\n        </Stack>\n\n      </Flex>\n\n      {/* sorting Cards */}\n      <div style={{marginTop:\"40px\"}}>\n        <Heading fontSize=\"3xl\" color=\"\" textAlign=\"center\">\n          Sorting Cards and Dragging order\n        </Heading>\n        {cards.map((card, i) => (<Card key={card.id} index={i} id={card.id} text={card.text} moveCard={moveCard} />))}\n      </div>\n\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport App from \"./App\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}